models:
  - name: stg__bike_data
    description: "Cleaned NYC citibike trip data"
    columns:
      - name: bike_id
        data_type: integer
        description: "bike id"
        tests:
          - dbt_expectations.expect_column_to_exist # column must exist

      - name: ride_id
        data_type: varchar
        description: "Ride id"
        tests:
          - dbt_expectations.expect_column_to_exist # column must exist

      - name: rideable_type
        data_type: varchar
        description: "Rideable type"

      - name: user_type
        data_type: varchar
        description: "User Type (Customer = 24-hour pass or 3-day pass user; Subscriber = Annual Member)"

      - name: birth_year
        data_type: integer
        description: "Year of Birth"

      - name: gender
        data_type: integer
        description: "Gender (Zero=unknown; 1=male; 2=female)"

      - name: trip_duration
        data_type: integer
        description: "Trip Duration (seconds)"
        tests:
          - dbt_expectations.expect_column_to_exist # column must exist
          # trip duration is expected to be between 0 and 28800 seconds
          - dbt_expectations.expect_column_values_to_be_between: 
              min_value: 0
              max_value: 28800 # 8 hours in seconds

      - name: start_time
        data_type: timestamp
        description: "Start Time and Date"
        tests:
          - not_null # start time cannot be null
          - dbt_expectations.expect_column_to_exist # start time column must exist
          - dbt_expectations.expect_column_values_to_be_of_type:
              column_type: timestamp # this must be an actual datestamp

      - name: stop_time
        data_type: timestamp
        description: "Stop Time and Date"
        tests:
          - not_null # stop time cannot be null
          - dbt_expectations.expect_column_to_exist # stop time column must exist
          - dbt_expectations.expect_column_values_to_be_of_type:
              column_type: timestamp # this must be an actual datestamp

      - name: start_station_id
        data_type: integer
        description: "Start station ID"
        tests:
          - dbt_expectations.expect_column_to_exist # column must exist

      - name: start_station_name
        data_type: varchar
        description: "Start station name"

      - name: start_station_latitude
        data_type: double
        description: "Start station latitude"

      - name: start_station_longitude
        data_type: double
        description: "Start station longitude"

      - name: end_station_id
        data_type: integer
        description: "End station ID"
        tests:
          - dbt_expectations.expect_column_to_exist # column must exist

      - name: end_station_name
        data_type: varchar
        description: "End station name"

      - name: end_station_latitude
        data_type: double
        description: "End station latitude"

      - name: end_station_longitude
        data_type: double
        description: "End station longitude"

      - name: filename
        data_type: varchar
        description: "File path for ingested raw data"

  - name: stg__central_park_weather
    description: "Cleaned GHCN (Global Historical Climatology Network) database that addresses the critical need for
historical daily temperature, precipitation, and snow records over global land areas. GHCN-Daily is a
composite of climate records from numerous sources that were merged and then subjected to a suite of
quality assurance reviews. The archive includes over 40 meteorological elements (see Table 4 below for
complete list) including temperature daily maximum/minimum, temperature at observation time,
precipitation, snowfall, snow depth, evaporation, wind movement, wind maximums, soil temperature,
cloudiness, and more"
    columns:
      - name: measurement_date
        data_type: date
        description: "is the year of the record (4 digits) followed by month (2 digits) and day (2 digits)"
        tests:
          - unique # there should be only one measurement for each day
          - not_null # having an actual value is mandatory
          - dbt_expectations.expect_column_values_to_be_of_type:
              column_type: date # this value should be an actual date

      - name: avg_wind_speed
        data_type: double
        description: "Average daily wind speed (meters per second or miles per hour as per user preference)"
        tests:
          # average wind speed should not be negative and should be less than 1000 m/s
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: 0
              max_value: 1000
              config:
                severity: warn

      - name: precipitation
        data_type: double
        description: "Precipitation (mm or inches as per user preference, inches to hundredths on Daily Form pdf file)"
        tests:
          # precipitation should not be negative and should be less than 1000 mm or inches
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: 0
              max_value: 1000
              config:
                severity: warn

      - name: snow
        data_type: double
        description: "Snowfall (mm or inches as per user preference, inches to tenths on Daily Form pdf file)"
        tests:
          # Snowfall should not be negative and should be less than 1000 mm or inches
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: 0
              max_value: 1000
              config:
                severity: warn

      - name: max_temp
        data_type: integer
        description: "Maximum temperature (Fahrenheit or Celsius as per user preference, Fahrenheit to tenths on
Daily Form pdf file"
        tests:
          # temperature should greater or equal to -20F should be less than 120F
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: -20
              max_value: 120
              config:
                severity: warn

      - name: min_temp
        data_type: integer
        description: "Minimum temperature (Fahrenheit or Celsius as per user preference, Fahrenheit to tenths on
Daily Form pdf file"
        tests:
        # temperature should greater or equal to -20F should be less than 120F
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: -20
              max_value: 120
              config:
                severity: warn

      - name: filename
        data_type: varchar
        description: "File path for ingested raw data"

  - name: stg__fhv_bases
    description: "Cleaned FHV bases in NYC"
    columns:
      - name: base_id
        data_type: varchar
        description: "The TLC license number of the dispatching base"
        tests: 
          # tests needed to constrain this field as primary key 
          - dbt_expectations.expect_column_to_exist
          - not_null
          - unique

      - name: base_name
        data_type: varchar
        description: "The official name of the base entity"

      - name: dba
        data_type: varchar
        description: "The “doing business as” name of the base"

      - name: dba_category
        data_type: varchar
        description: "“doing business as” category"

      - name: filename
        data_type: varchar
        description: "File path for ingested raw data"

  - name: stg__fhv_tripdata
    description: "Cleaned FHV trip data. Each row represents a single trip in an FHV"
    columns:
      - name: dispatching_base_id
        data_type: varchar
        description: "The TLC Base License Number of the base that dispatched the trip"
        tests:
          # each value in this field should match a base_id in stg__fhv_bases table
          - relationships:
              to: ref('stg__fhv_bases')
              field: base_id
              config:
                    severity: warn

      - name: pickup_datetime
        data_type: timestamp
        description: "The date and time of the trip pick-up"

      - name: dropoff_datetime
        data_type: timestamp
        description: "The date and time of the trip dropoff"

      - name: pickup_location_id
        data_type: double
        description: "TLC Taxi Zone in which the trip began"

      - name: dropoff_location_id
        data_type: double
        description: "TLC Taxi Zone in which the trip ended"

      - name: affiliated_base_id
        data_type: varchar
        description: ""
        tests:
          # each value in this field should match a base_id in stg__fhv_bases table
          - relationships:
              to: ref('stg__fhv_bases')
              field: base_id
              config:
                    severity: warn

      - name: filename
        data_type: varchar
        description: "File path for ingested raw data"

  - name: stg__fhvhv_tripdata
    description: "High Volume FHV trip data. Each row represents a single trip in an FHV
dispatched by one of NYC’s licensed High Volume FHV bases. On August 14, 2018, Mayor de Blasio
signed Local Law 149 of 2018, creating a new license category for TLC-licensed FHV businesses that
currently dispatch or plan to dispatch more than 10,000 FHV trips in New York City per day under a
single brand, trade, or operating name, referred to as High-Volume For-Hire Services (HVFHS). This law
went into effect on Feb 1, 2019"
    columns:
      - name: hvfhs_license_num
        data_type: varchar
        description: "The TLC license number of the HVFHS base or business
As of September 2019, the HVFHS licensees are the following:
• HV0002: Juno
• HV0003: Uber
• HV0004: Via
• HV0005: Lyft"

      - name: dispatching_base_id
        data_type: varchar
        description: "The TLC Base License Number of the base that dispatched the trip"

      - name: originating_base_id
        data_type: varchar
        description: "base number of the base that received the original trip request"

      - name: request_datetime
        data_type: timestamp
        description: "date/time when passenger requested to be picked up"

      - name: on_scene_datetime
        data_type: timestamp
        description: "date/time when driver arrived at the pick-up location (Accessible
Vehicles-only)"

      - name: pickup_datetime
        data_type: timestamp
        description: "The date and time of the trip pick-up"

      - name: dropoff_datetime
        data_type: timestamp
        description: The date and time of the trip drop-off""

      - name: pickup_location_id
        data_type: bigint
        description: "TLC Taxi Zone in which the trip began"

      - name: dropoff_location_id
        data_type: bigint
        description: "TLC Taxi Zone in which the trip ended"

      - name: trip_miles
        data_type: double
        description: "total miles for passenger trip"

      - name: trip_time
        data_type: bigint
        description: "total time in seconds for passenger trip"
        tests:
          # trip time is expected to be greater or equal to zero and less than 43200 seconds
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: 0
              max_value: 43200 # equivalent to 12 hours in seconds

      - name: base_passenger_fare
        data_type: double
        description: "base passenger fare before tolls, tips, taxes, and fees"

      - name: toll_charges
        data_type: double
        description: "total amount of all tolls paid in trip"

      - name: black_card_funds
        data_type: double
        description: "total amount collected in trip for Black Car Fund"

      - name: sales_tax
        data_type: double
        description: "total amount collected in trip for NYS sales tax"

      - name: congestion_surcharge
        data_type: double
        description: "total amount collected in trip for NYS congestion surcharge"

      - name: airport_fee
        data_type: double
        description: "$2.50 for both drop off and pick up at LaGuardia, Newark, and John
F. Kennedy airports"

      - name: tip_charges
        data_type: double
        description: "total amount of tips received from passenger"

      - name: driver_pay
        data_type: double
        description: "total driver pay (not including tolls or tips and net of commission,
surcharges, or taxes)"

      - name: shared_request
        data_type: boolean
        description: "Did the passenger agree to a shared/pooled ride, regardless of
whether they were matched? (True/False)"
        tests:
          # data type for this field should be bool
          - dbt_expectations.expect_column_values_to_be_of_type:
              column_type: boolean

      - name: shared_match
        data_type: boolean
        description: "Did the passenger share the vehicle with another passenger who
booked separately at any point during the trip? (True/False)"
        tests:
          # data type for this field should be bool
          - dbt_expectations.expect_column_values_to_be_of_type:
              column_type: boolean

      - name: metro_transportation
        data_type: boolean
        description: "Was the trip administered on behalf of the Metropolitan
Transportation Authority (MTA)? (True/False)"
        tests:
          # data type for this field should be bool
          - dbt_expectations.expect_column_values_to_be_of_type:
              column_type: boolean

      - name: wheelchair_accesible_request
        data_type: boolean
        description: "Did the passenger request a wheelchair-accessible vehicle (WAV)?
(True/False)"
        tests:
          # data type for this field should be bool
          - dbt_expectations.expect_column_values_to_be_of_type:
              column_type: boolean

      - name: wheelchair_accesible_match
        data_type: boolean
        description: "Did the trip occur in a wheelchair-accessible vehicle (WAV)? (True/False)"
        tests:
          # data type for this field should be bool
          - dbt_expectations.expect_column_values_to_be_of_type:
              column_type: boolean

      - name: filename
        data_type: varchar
        description: "File path for ingested raw data"

  - name: stg__green_tripdata
    description: ""
    columns:
      - name: vendor_id
        data_type: bigint
        description: ""

      - name: pickup_datetime
        data_type: timestamp
        description: ""

      - name: dropoff_datetime
        data_type: timestamp
        description: ""

      - name: store_and_fwd
        data_type: boolean
        description: ""

      - name: ratecode_id
        data_type: double
        description: ""

      - name: pickup_location_id
        data_type: bigint
        description: ""

      - name: dropoff_location_id
        data_type: bigint
        description: ""

      - name: passenger_count
        data_type: double
        description: ""

      - name: trip_distance
        data_type: double
        description: ""

      - name: fare_charges
        data_type: double
        description: ""

      - name: extra_charges
        data_type: double
        description: ""

      - name: mta_tax
        data_type: double
        description: ""

      - name: tip_charges
        data_type: double
        description: ""

      - name: toll_charges
        data_type: double
        description: ""

      - name: improvement_surcharge
        data_type: double
        description: ""

      - name: total_amount
        data_type: double
        description: ""

      - name: payment_type
        data_type: double
        description: ""

      - name: trip_type
        data_type: double
        description: ""

      - name: congestion_surcharge
        data_type: double
        description: ""

      - name: filename
        data_type: varchar
        description: ""

  - name: stg__yellow_tripdata
    description: ""
    columns:
      - name: vendor_id
        data_type: bigint
        description: ""

      - name: pickup_datetime
        data_type: timestamp
        description: ""

      - name: dropoff_datetime
        data_type: timestamp
        description: ""

      - name: passenger_count
        data_type: double
        description: ""

      - name: trip_distance
        data_type: double
        description: ""

      - name: ratecode_id
        data_type: double
        description: ""

      - name: store_and_fwd
        data_type: boolean
        description: ""

      - name: pickup_location_id
        data_type: bigint
        description: ""

      - name: dropoff_location_id
        data_type: bigint
        description: ""

      - name: payment_type
        data_type: bigint
        description: ""

      - name: fare_charges
        data_type: double
        description: ""

      - name: extra_charges
        data_type: double
        description: ""

      - name: mta_tax
        data_type: double
        description: ""

      - name: tip_charges
        data_type: double
        description: ""

      - name: toll_charges
        data_type: double
        description: ""

      - name: improvement_surcharge
        data_type: double
        description: ""

      - name: total_amount
        data_type: double
        description: ""

      - name: congestion_surcharge
        data_type: double
        description: ""

      - name: airport_charges
        data_type: double
        description: ""

      - name: filename
        data_type: varchar
        description: ""